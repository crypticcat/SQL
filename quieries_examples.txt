From https://sqlzoo.net/
...
2. How to use WHERE to filter records.
Show the name for the countries that have a population of at least 200 million.
200 million is 200000000, there are eight zeros
SELECT name FROM world
WHERE population > 200000000

3. Give the name and the per capita GDP for those countries with a population of at least 200 million.
SELECT name, gdp/population
FROM world
WHERE population > 200000000

4. Show the name and population in millions for the countries of the continent 'South America'.
Divide the population by 1000000 to get population in millions:
SELECT name, population/1000000
FROM world
WHERE continent = 'South America'

5. Show the name and population for France, Germany, Italy:
SELECT name, population
FROM world
WHERE name IN ('France', 'Germany', 'Italy')

6. Show the countries which have a name that includes the word 'United':
SELECT name
FROM world
WHERE name LIKE '%United%'

7. Two ways to be big: A country is big if it has an area of more than 3 million sq km or it has a population of more than 250 million.
Show the countries that are big by area or big by population. Show name, population and area:
SELECT name, population, area
FROM world
WHERE area > 3000000 OR population > 250000000

8. Exclusive OR (XOR). Show the countries that are big by area or big by population but not both. Show name, population and area.
Australia has a big area but a small population, it should be included.
Indonesia has a big population but a small area, it should be included.
China has a big population and big area, it should be excluded.
United Kingdom has a small population and a small area, it should be excluded.
Solution:
SELECT name, population, area
FROM world
WHERE area > 3000000 XOR population > 250000000

9. Show the name and population in millions and the GDP in billions for the countries of the continent 'South America'.
Use the ROUND function to show the values to two decimal places.
For South America show population in millions and GDP in billions both to 2 decimal places:
SELECT name, ROUND(population/1000000,2), ROUND(gdp/1000000000,2)
FROM world
WHERE continent = 'South America'


ROUND(f,p) returns f rounded to p decimal places.
The number of decimal places may be negative, this will round to the nearest 10 (when p is -1) or 100 (when p is -2) or 1000 (when p is -3) etc..
ROUND(7253.86, 0)    ->  7254
ROUND(7253.86, 1)    ->  7253.9
ROUND(7253.86,-3)    ->  7000
Compatibility: ROUND(f,p): ingres, mysql, oracle, postgres, sqlserver - yes.
10. Show the name and per-capita GDP for those countries with a GDP of at least one trillion (1000000000000; that is 12 zeros).
Round this value to the nearest 1000.
Show per-capita GDP for the trillion dollar countries to the nearest $1000:
SELECT name, ROUND(gdp/population, -3)
FROM world
WHERE gdp >= 1000000000000

LENGTH(s) returns the number of characters in string s.
Compatibility: LENGTH(s): ingres, mysql, oracle, postgres - yes. Sqlserver - no (use LEN(s)).
11. Greece has capital Athens.
Each of the strings 'Greece', and 'Athens' has 6 characters.
Show the name and capital where the name and the capital have the same number of characters.
You can use the LENGTH function to find the number of characters in a string:
SELECT name, capital
FROM world
WHERE LENGTH(name) = LENGTH(capital)

LEFT(s,n) allows you to extract n characters from the start of the string s
Compatibility: LEFT(s,i): ingres, mysql, sqlserver - yes. Oracle - no (use SUBSTR(s, 1, i)). Postgres - no (use SUBSTRING(s, 1, i)):
12. The capital of Sweden is Stockholm. Both words start with the letter 'S'.
Show the name and the capital where the first letters of each match.
Don't include countries where the name and the capital are the same word.
You can use the function LEFT to isolate the first character.
You can use <> as the NOT EQUALS operator:
SELECT name, capital
FROM world
WHERE LEFT(name, 1) = LEFT(capital, 1) AND capital <> name;

13. Equatorial Guinea and Dominican Republic have all of the vowels (a e i o u) in the name.
They don't count because they have more than one word in the name.
Find the country that has all the vowels and no spaces in its name.
You can use the phrase name NOT LIKE '%a%' to exclude characters from your results.
The query shown misses countries like Bahamas and Belarus because they contain at least one 'a':
SELECT name FROM world
WHERE
name NOT LIKE '% %' AND
name LIKE '%a%' AND
name LIKE '%e%' AND
name LIKE '%i%' AND
name LIKE '%o%' AND
name LIKE '%u%';

"nobel" table:
Find all details of the prize won by EUGENE O'NEILL
Escaping single quotes:
You can't put a single quote in a quote string directly.
You can use two single quotes within a quoted string:
SELECT * FROM nobel
WHERE winner = 'EUGENE O''NEILL';

List the winners, year and subject where the winner starts with Sir.
Show the the most recent first, then by name order:
SELECT winner, yr, subject
  FROM nobel
WHERE winner LIKE 'Sir%'
 ORDER BY yr DESC, winner;

The expression subject IN ('Chemistry','Physics') can be used as a value - it will be 0 or 1.
Show the 1984 winners and subject ordered by subject and winner name; but list Chemistry and Physics last.
SELECT winner, subject
  FROM nobel
 WHERE yr=1984
 ORDER BY subject IN ('Physics','Chemistry'), subject, winner;
 
 Solution2:
 SELECT winner, subject
  FROM nobel
 WHERE yr=1984
 ORDER BY 
 CASE WHEN subject IN ('Physics','Chemistry') THEN 1 ELSE 0 END, subject, winner;

From "world" table:
Give the total GDP of Africa:
SELECT SUM(gdp)
FROM world
WHERE continent = 'Africa'

How many countries have an area of at least 1000000:
SELECT COUNT(name)
FROM world
WHERE area >= 1000000;

By including a GROUP BY clause functions such as SUM and COUNT are applied to groups of items sharing values.
When you specify GROUP BY continent the result is that you get only one row for each different value of continent.
All the other columns must be "aggregated" by one of SUM, COUNT ...
The HAVING clause allows use to filter the groups which are displayed.
The HAVING clause is tested after the GROUP BY.
The WHERE clause filters rows before the aggregation, the HAVING clause filters after the aggregation.
If a ORDER BY clause is included we can refer to columns by their position.

For each continent show the continent and number of countries:
SELECT continent, COUNT(name)
FROM world
GROUP BY continent;

For each continent show the continent and number of countries with populations of at least 10 million:
SELECT continent, COUNT(name)
FROM world
WHERE population >=10000000
GROUP BY continent;

List the continents that have a total population of at least 100 million:
SELECT continent
  FROM world
 GROUP BY continent
HAVING SUM(population)>=100000000;

From Hackerrank. Easy:
Let  be the number of CITY entries in STATION, and let  be the number of distinct CITY names in STATION; query the value of  from STATION.
SELECT COUNT(city) - (COUNT(DISTINCT (city))) as N 
FROM station;

Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name).
If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically:
SELECT city, LENGTH(city)
    FROM station
ORDER BY LENGTH(city) ASC, city ASC
LIMIT 1;
SELECT city, LENGTH(city)
   FROM station                              
ORDER BY LENGTH(city) DESC, city ASC
LIMIT 1;

Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION.
Your result cannot contain duplicates:
SELECT DISTINCT city
    FROM station
WHERE city LIKE 'A%' OR
city LIKE 'E%' OR
city LIKE 'I%' OR
city LIKE 'O%' OR
city LIKE 'U%';

Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates:
SELECT DISTINCT city
    FROM station
WHERE (city LIKE 'A%' OR city LIKE 'E%' OR city LIKE 'I%' OR city LIKE 'O%' OR
city LIKE 'U%') AND
(city LIKE '%a' OR city LIKE '%e' OR city LIKE '%i' OR city LIKE '%o' OR city LIKE '%u');

SELECT DISTINCT city FROM station WHERE city LIKE '[AEIOU]%' AND city LIKE '%[aeuou]';

Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates:
SELECT DISTINCT city
    FROM station
WHERE city NOT LIKE 'A%' AND
city NOT LIKE 'E%' AND
city NOT LIKE 'I%' AND
city NOT LIKE 'O%' AND
city NOT LIKE 'U%';

Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates:
SELECT DISTINCT city
    FROM station
WHERE city NOT LIKE 'A%' AND
city NOT LIKE 'E%' AND
city NOT LIKE 'I%' AND
city NOT LIKE 'O%' AND
city NOT LIKE 'U%';

Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates:
SELECT DISTINCT city
    FROM station
WHERE (city NOT LIKE 'A%' AND
city NOT LIKE 'E%' AND
city NOT LIKE 'I%' AND
city NOT LIKE 'O%' AND
city NOT LIKE 'U%') AND 
(city NOT LIKE '%a' AND
city NOT LIKE '%e' AND
city NOT LIKE '%i' AND
city NOT LIKE '%o' AND
city NOT LIKE '%u');

Query the Name of any student in STUDENTS who scored higher than  Marks.
Order your output by the last three characters of each name.
If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID:
SELECT name
FROM students
WHERE marks > 75
ORDER BY RIGHT(name, 3) ASC, id ASC;

Query the average population for all cities in CITY, rounded down to the nearest integer:
SELECT ROUND(AVG(population), 0)
FROM city;

Query the following two values from the STATION table:
The sum of all values in LAT_N rounded to a scale of  decimal places.
The sum of all values in LONG_W rounded to a scale of  decimal places:
SELECT ROUND(SUM(LAT_N), 2), ROUND(SUM(LONG_W), 2)
FROM station;

Query the sum of Northern Latitudes (LAT_N) from STATION having values greater than  and less than . Truncate your answer to 4 decimal places:
SELECT ROUND(SUM(LAT_N), 4)
FROM station
WHERE LAT_N > 38.7880 AND LAT_N < 137.2345

We define an employee's total earnings to be their monthly  worked, and the maximum total earnings to be the maximum total earnings for any employee in the Employee table. Write a query to find the maximum total earnings for all employees as well as the total number of employees who have maximum total earnings. Then print these values as  space-separated integers:
SELECT MAX(salary * months), COUNT(employee_id)
FROM Employee
WHERE salary * months = 
(SELECT MAX(salary * months) FROM Employee);

Query the Western Longitude (LONG_W)where the smallest Northern Latitude (LAT_N) in STATION is greater than . Round your answer to  decimal places:
SELECT ROUND (LONG_W, 4)
FROM station
WHERE LAT_N = (SELECT MIN(LAT_N) FROM station WHERE LAT_N > 38.7780);

Query the Western Longitude (LONG_W) for the largest Northern Latitude (LAT_N) in STATION that is less than 137.345. Round your answer to  decimal places:
SELECT ROUND(LONG_W, 4)
FROM station
WHERE LAT_N = (SELECT MAX(LAT_N) FROM station WHERE LAT_N < 137.345);

Consider P1(a, b) and P2(c, d) to be two points on a 2D plane.
a happens to equal the minimum value in Northern Latitude (LAT_N in STATION).
b happens to equal the minimum value in Western Longitude (LONG_W in STATION).
c happens to equal the maximum value in Northern Latitude (LAT_N in STATION).
d happens to equal the maximum value in Western Longitude (LONG_W in STATION).
Query the Manhattan Distance between points P1 and P2 and round it to a scale of 4 decimal places.
Manhattan distance — The distance between two points measured along axes at right angles. In a plane with p1 at (a, b) and p2 at (c, d), it is |a - c| + |b - d|
SELECT ROUND((SELECT (ABS(MIN(LAT_N) - MAX(LAT_N)) + ABS(MIN(LONG_W) - MAX(LONG_W))) FROM station), 4) FROM station;

Consider P1(a, c) and P2(b, d)  to be two points on a 2D plane where (a, b) are the respective minimum and maximum values of Northern Latitude (LAT_N) and (c, d) are the respective minimum and maximum values of Western Longitude (LONG_W) in STATION.
Query the Euclidean Distance between points  and  and format your answer to display 4 decimal digits.
In the Euclidean plane, if P1 = (a, c) and P2 = (b, d) then the distance is given by d(P1, P2) = sqrt((b - a)2 + (d - c)2)
SELECT ROUND(SQRT(POWER((MAX(LAT_N) - MIN(LAT_N)), 2) + POWER((MAX(LONG_W) - MIN(LONG_W)), 2)), 4) FROM station;

A median is defined as a number separating the higher half of a data set from the lower half. Query the median of the Northern Latitudes (LAT_N) from STATION and round your answer to 4  decimal places:


Show the countries in Europe with a per capita GDP greater than 'United Kingdom':
SELECT name
FROM world
WHERE gdp/population > (
SELECT gdp/population FROM world WHERE name='United Kingdom') AND continent = 'Europe'

List the name and continent of countries in the continents containing either Argentina or Australia.
Order by name of the country:
SELECT name, continent
FROM world
WHERE continent IN (
SELECT continent FROM world WHERE name='Argentina' OR name='Australia')
ORDER BY name

Which country has a population that is more than Canada but less than Poland?
Show the name and the population:
SELECT name, population
FROM world
WHERE population > (SELECT population FROM world WHERE name='Canada')
AND population <  (SELECT population FROM world WHERE name='Poland')

CONCAT allows you to stick two or more strings together.
This operation is concatenation.
Compatibility: CONCAT(s1,s2): ingres, mysql - yes; no: oracle (s1 || s2), postgres (s1 || s2), sqlserver s1 + s2.
Germany (population 80 million) has the largest population of the countries in Europe.
Show the name and the population of each country in Europe. Show the population as a percentage of the population of Germany.
SELECT name, CONCAT(ROUND(population/(SELECT population FROM world WHERE name='Germany')*100, 0), '%')
FROM world
WHERE continent = 'Europe'

We can use the word ALL to allow >= or > or < or <=to act over a list. For example, you can find the largest country in the world, by population with this query:
SELECT name
  FROM world
 WHERE population >= ALL(SELECT population
                           FROM world
                          WHERE population>0)
You need the condition population>0 in the sub-query as some countries have null for population.

Which countries have a GDP greater than every country in Europe? [Give the name only.] (Some countries may have NULL gdp values):
SELECT name
  FROM world
 WHERE gdp > ALL(SELECT gdp
                           FROM world
                          WHERE gdp>0 AND continent='Europe')

A correlated subquery works like a nested loop: the subquery only has access to rows related to a single record at a time in the outer query. The technique relies on table aliases to identify two different uses of the same table, one in the outer query and the other in the subquery. One way to interpret the line in the WHERE clause that references the two table is “… where the correlated values are the same”:
In the example provided, you would say “select the country details from world where the population is greater than or equal to the population of all countries where the continent is the same”.

Find the largest country (by area) in each continent, show the continent, the name and the area:
SELECT continent, name, area FROM world x
  WHERE area >= ALL
    (SELECT area FROM world y
        WHERE y.continent=x.continent
          AND area>0)

List each continent and the name of the country that comes first alphabetically:
SELECT continent, name from world x
where name = (SELECT name 
                  FROM world y 
                  WHERE x.continent =  y.continent 
                  ORDER BY name ASC 
                  LIMIT 1)

You can combine the two steps into a single query with a JOIN.

SELECT * FROM game JOIN goal ON (id=matchid)
The FROM clause says to merge data from the goal table with that from the game table. The ON says how to figure out which rows in game go with which rows in goal - the matchid from goal must match id from game. (If we wanted to be more clear/specific we could say 
ON (game.id=goal.matchid)
The code below shows the player (from the goal) and stadium name (from the game table) for every goal scored.
Modify it to show the player, teamid, stadium and mdate for every German goal.
SELECT player,teamid, stadium, mdate
  FROM game JOIN goal ON (game.id=goal.matchid)
WHERE teamid='GER';

The table eteam gives details of every national team including the coach. You can JOIN goal to eteam using the phrase goal JOIN eteam on teamid=id
Show player, teamid, coach, gtime for all goals scored in the first 10 minutes gtime<=10
SELECT player, teamid, coach, gtime
  FROM goal JOIN eteam ON teamid=id
 WHERE gtime<=10;
 
To JOIN game with eteam you could use either
game JOIN eteam ON (team1=eteam.id) or game JOIN eteam ON (team2=eteam.id)
Notice that because id is a column name in both game and eteam you must specify eteam.id instead of just id
List the the dates of the matches and the name of the team in which 'Fernando Santos' was the team1 coach.
SELECT mdate, teamname
  FROM game JOIN eteam ON (team1=eteam.id)
 WHERE coach = 'Fernando Santos';

The example query shows all goals scored in the Germany-Greece quarterfinal.
Instead show the name of all players who scored a goal against Germany.
Hint: Select goals scored only by non-German players in matches where GER was the id of either team1 or team2.
You can use teamid!='GER' to prevent listing German players.
You can use DISTINCT to stop players being listed twice.
SELECT DISTINCT player
  FROM goal JOIN game ON matchid = id 
    WHERE teamid != 'GER' AND (team1 = 'GER' OR team2 = 'GER');
    
Show teamname and the total number of goals scored.
You should COUNT(*) in the SELECT line and GROUP BY teamname:
SELECT teamname, COUNT(matchid)
  FROM eteam JOIN goal ON id=teamid
 GROUP BY teamname;

Show the stadium and the number of goals scored in each stadium:
SELECT stadium, COUNT(matchid)
  FROM game JOIN goal ON matchid=id
 GROUP BY stadium;

For every match involving 'POL', show the matchid, date and the number of goals scored:
SELECT matchid, mdate, COUNT(*)
  FROM game JOIN goal ON matchid = id 
WHERE (team1 = 'POL' OR team2 = 'POL')
 GROUP BY matchid, mdate;
 
 For every match where 'GER' scored, show matchid, match date and the number of goals scored by 'GER':
 SELECT matchid, mdate, COUNT(*)
  FROM game JOIN goal ON matchid = id 
WHERE (team1 = 'GER' OR team2 = 'GER')
AND teamid = 'GER'
 GROUP BY matchid, mdate;
 
 CASE WHEN b1 THEN v1 END
 ingres, mysql, oracle, postgres, sqlserver:	Yes;
CASE allows you to return different values under different conditions.
If there no conditions match (and there is not ELSE) then NULL is returned
CASE WHEN condition1 THEN value1 
       WHEN condition2 THEN value2  
       ELSE def_value 
  END
  
 NVL(f1, f2): ingres, mysql, postgres, sqlserver - No	COALESCE(f1, f2); oracle	Yes	COALESCE(f1, f2)
 NVL can be useful when you want to replace a NULL value with some other value. In this example you show the name of the party for each MSP that has a party. For the MSP with no party (such as Canavan, Dennis) you show the string None.
 SELECT name, party
      ,COALESCE(party,'None') AS aff
  FROM msp WHERE name LIKE 'C%'
  
  COALESCE takes any number of arguments and returns the first value that is not null.
  COALESCE(x,y,z) = x if x is not NULL
  COALESCE(x,y,z) = y if x is NULL and y is not NULL
  COALESCE(x,y,z) = z if x and y are NULL but z is not NULL
  COALESCE(x,y,z) = NULL if x and y and z are all NULL
COALESCE can be useful when you want to replace a NULL value with some other value. In this example you show the name of the party for each MSP that has a party. For the MSP with no party (such as Canavan, Dennis) you show the string None.
SELECT name, party
      ,COALESCE(party,'None') AS aff
  FROM msp WHERE name LIKE 'C%'

  


SUBSTRING allows you to extract part of a string.
Compatibility: yes - ingres: (SUBSTRING(s FROM i FOR j)), mysql:	SUBSTRING(s FROM i FOR j), postgres:	SUBSTRING(s FROM i FOR j),
sqlserver; no - oracle:	SUBSTR(s,i,j)

TRIM(s) returns the string with leading and trailing spaces removed.
This function is particularly useful when working with CHAR fields. Typically a CHAR field is paddded with spaces. In contrast a VARCHAR field does not require padding.
Compatibility: yes - ingres, mysql, oracle, postgres; no - sqlserver: LTRIM(RTRIM(s))

RIGHT(s,n) allows you to extract n characters from the end of the string s.
Compatibility: yes - ingres, mysql, sqlserver; no - oracle:	SUBSTR(s, -i), postgres:	SUBSTRING(s , 1+LENGTH(s)-i , i)

POSITION(s1 IN s2) returns the character position of the substring s1 within the larger string s2. The first character is in position 1. If s1 does not occur in s2 it returns 0.
Compatibility: yes - ingres, mysql, postgres; no - oracle:	INSTR(s2,s1), sqlserver:	PATINDEX('%'+s1+'%',s2)

